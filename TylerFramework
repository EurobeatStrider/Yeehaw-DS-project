#include <iostream>
#include <conio.h>
#include <malloc.h>
#include <time.h>
#define MAX 5
using namespace std;

typedef struct die{
    int val;
    bool locked;
}die;

typedef struct player{
    player *left;
    player *right;
    struct die *dice[MAX];
    int hp;
    int maxhp;
    int arrowsHeld;
    int role;
    int ability;
}player;

void resolveDice(player *currPlayer); //master function
//Supporting Functions
void giveBeer(player *currPlayer); //done
void shoot(player *currPlayer); //vince
void gatling(player *currPlayer); //vince
void kaboom(player *currPlayer); //done
void resolveArrows(player *sheriff); //done
int listPlayers(player *sheriff); //done

void sixFeetUnder(player *deceased); //done
//Supporting Function
int checkVictoryConditions(player *sheriff);

player *sheriff;
int arrowsRemaining;

int main()
{
    srand(time(NULL));
}

int listPlayers(player *sheriff)
{
    int playerCount = 0;
    player *temp = sheriff;
    cout << "Sheriff ";
    do{
        cout << "["<<playerCount<<"] HP: "<<temp->hp<<" Arrows Held: "<<temp->arrowsHeld<<endl;
        playerCount++;
        temp = temp->right;
    } while(temp != sheriff);
    return playerCount;
}

void resolveArrows(player *sheriff)
{
    player *current = sheriff;
     do{
         current->hp -= current->arrowsHeld;
         arrowsRemaining += current->arrowsHeld;
         current->arrowsHeld = 0;
    } while(current != sheriff);
    cout << "Arrows Resolved...\n";
}

void giveBeer(player *currPlayer)
{
    int players = listPlayers(sheriff);
    int howFarLeft = rand() % players;
    player *recipient = currPlayer;
    while(howFarLeft > 0)
    {
        recipient = recipient->left;
    }
    if(recipient->hp != recipient->maxhp)
        recipient->hp++;
}

void kaboom(player *currPlayer)
{
    for(int i = 0; i < MAX; i++)
    {
        currPlayer->dice[i]->locked = true;
    }
    currPlayer->hp--;
}

int checkVictoryConditions(player *sheriff)
{
    
}

void sixFeetUnder(player *deceased)
{
    deceased->left->right = deceased->right;
    deceased->right->left = deceased->left;
    cout << "Player of Role " << deceased->role << "has died."<<endl;
    checkVictoryConditions(sheriff);
}

